name: CI
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
jobs:
  build-test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      image-tag: ${{ steps.set-tag.outputs.tag }}
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install dependencies
        run: pip install -r requirements.txt
      - name: Run tests
        run: python -m pytest

      - name: Set image tag
        id: set-tag
        run: |
          TAG=$(echo ${GITHUB_SHA} | cut -c1-7)
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "Generated tag: $TAG"

      - name: Log in to GitHub Container Registry with retry
        if: github.ref == 'refs/heads/main'
        run: |
          for i in 1 2 3; do
            echo "Attempting to log in to ghcr.io (Attempt $i)"
            echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin && break
            echo "Login failed. Retrying in 15 seconds..."
            sleep 15
          done
      - name: Build and Push Docker Image to GHCR
        if: github.ref == 'refs/heads/main' # Only push on main branch
        run: |
          TAG=${{ steps.set-tag.outputs.tag }}
          IMAGE_ID=ghcr.io/${{ github.repository_owner }}/voicetranscript-service
          # Docker image tags must be lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[:upper:]' '[:lower:]')
          echo "Building image with tag: $TAG"
          # Build the image with the specific tag
          docker build . --tag $IMAGE_ID:$TAG
          # Tag the same image as latest
          docker tag $IMAGE_ID:$TAG $IMAGE_ID:latest
          # Push both tags explicitly
          docker push $IMAGE_ID:$TAG
          docker push $IMAGE_ID:latest
  deploy:
    needs: build-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Set image and tag in docker-compose
        run: |
          TAG=${{ needs.build-test.outputs.image-tag }}
          OWNER=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')
          echo "Using tag from build job: $TAG"
          sed -i "s|ghcr.io/srath5/|ghcr.io/$OWNER/|g" docker-compose.prod.yml
          sed -i "s/__TAG__/$TAG/g" docker-compose.prod.yml
          echo "Updated docker-compose.prod.yml:"
          cat docker-compose.prod.yml
      - name: Copy docker-compose.prod.yml to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          source: "docker-compose.prod.yml"
          target: "~/voicetranscript-service" # Assuming the project is in this directory
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            cd voicetranscript-service
            echo "=== Deployment Debug Info ==="
            echo "Current docker-compose.prod.yml content:"
            cat docker-compose.prod.yml
            echo "=========================="
            
            echo ${{ secrets.GITHUB_TOKEN }} | sudo docker login ghcr.io -u ${{ github.actor }} --password-stdin
            
            # Forcefully free up port 8000
            sudo fuser -k 8000/tcp || true
            
            # Stop and remove any existing containers to free up the port
            sudo docker-compose -f docker-compose.prod.yml down --remove-orphans
            
            # Wait a moment for containers to fully stop
            sleep 5
            
            # Prune old docker images and other resources to free up space
            sudo docker system prune -af
            
            # Verify the image we're about to pull
            echo "=== About to pull the following images ==="
            sudo docker-compose -f docker-compose.prod.yml config --services
            sudo docker-compose -f docker-compose.prod.yml config | grep image:
            echo "=========================================="
            
            # Pull the specific versioned image (not latest)
            sudo docker-compose -f docker-compose.prod.yml pull app
            
            # Verify the pulled image
            echo "=== Verifying pulled image ==="
            sudo docker images | grep voicetranscript-service
            echo "=============================="
            
            # Start the services, which will use the specific tagged image
            sudo docker-compose -f docker-compose.prod.yml up -d
            
            # Final verification
            echo "=== Final container status ==="
            sudo docker-compose -f docker-compose.prod.yml ps
            sudo docker ps | grep voicetranscript-service
            echo "=============================="
